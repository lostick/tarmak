{{/* vim: set ft=tf: */}}
{{ if .Role.AWS.ELBAPI -}}
resource "aws_elb" "{{.Role.TFName}}" {
  name         = "${format("%.23s-api", data.template_file.stack_name.rendered)}"
  subnets      = ["${var.private_subnet_ids}"]
  internal     = true
  idle_timeout = 3600

  security_groups = [
    "${aws_security_group.{{.Role.TFName}}_elb.id}",
  ]

  listener {
    instance_port     = 6443
    instance_protocol = "tcp"
    lb_port           = 6443
    lb_protocol       = "tcp"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "SSL:6443"
    interval            = 30
  }

{{ if .Role.AWS.EnableInternalELBAccessLogs -}}
  access_logs {
    enabled       = "${var.elb_access_logs_internal_enabled}"
    bucket        = "${var.elb_access_logs_internal_bucket}"
    bucket_prefix = "${var.elb_access_logs_internal_bucket_prefix}"
    interval      = "${var.elb_access_logs_internal_bucket_interval}"
  }
{{ end -}}

  tags {
    Name        = "${format("%.23s-api", data.template_file.stack_name.rendered)}"
    Environment = "${var.environment}"
    Project     = "${var.project}"
    Contact     = "${var.contact}"
  }
}

resource "aws_route53_record" "{{.Role.TFName}}_api" {
  zone_id = "${var.private_zone_id}"
  name    = "api.${data.template_file.stack_name.rendered}"
  type    = "A"

  alias {
    name                   = "${aws_elb.{{.Role.TFName}}.dns_name}"
    zone_id                = "${data.aws_elb_hosted_zone_id.main.id}"
    evaluate_target_health = true
  }
}

{{ if .Role.AWS.ELBAPIPublic -}}
resource "aws_elb" "{{.Role.TFName}}_public" {
  name         = "${format("%.19s-api-pub", data.template_file.stack_name.rendered)}"
  subnets      = ["${var.public_subnet_ids}"]
  idle_timeout = 3600

  security_groups = [
    "${aws_security_group.{{.Role.TFName}}_elb.id}",
    "${aws_security_group.{{.Role.TFName}}_elb_public.id}",
  ]

  listener {
    instance_port     = 6443
    instance_protocol = "tcp"
    lb_port           = 443
    lb_protocol       = "tcp"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "SSL:6443"
    interval            = 30
  }

{{ if .Role.AWS.EnablePublicELBAccessLogs -}}
  access_logs {
    enabled       = "${var.elb_access_logs_public_enabled}"
    bucket        = "${var.elb_access_logs_public_bucket}"
    bucket_prefix = "${var.elb_access_logs_public_bucket_prefix}"
    interval      = "${var.elb_access_logs_public_bucket_interval}"
  }
{{ end -}}

  tags {
    Name        = "${format("%s-api-pub", data.template_file.stack_name.rendered)}"
    Environment = "${var.environment}"
    Project     = "${var.project}"
    Contact     = "${var.contact}"
  }
}

resource "aws_route53_record" "{{.Role.TFName}}_api_public" {
  zone_id = "${var.public_zone_id}"
  name    = "api.${data.template_file.stack_name.rendered}"
  type    = "A"

  alias {
    name                   = "${aws_elb.{{.Role.TFName}}_public.dns_name}"
    zone_id                = "${data.aws_elb_hosted_zone_id.main.id}"
    evaluate_target_health = true
  }
}
{{ end -}}

{{ end -}}
{{ if .Role.AWS.ELBIngress -}}
output "ingress_wildcard_fqdn" {
  value = "${aws_route53_record.{{.Role.TFName}}_elb.fqdn}"
}

# TODO: Enable me again
#data "aws_acm_certificate" "wildcard" {
#  domain   = "*.${var.name}.${var.public_zone}"
#  statuses = ["ISSUED"]
#}

resource "aws_route53_record" "{{.Role.TFName}}_elb" {
  count   = 1
  zone_id = "${var.public_zone_id}"
{{ if eq .Role.Name "jenkins" -}}
  name    = "jenkins.${var.environment}"
{{ else -}}
  name    = "*.${var.name}"
{{ end -}}
  type    = "A"

  alias {
    name                   = "${aws_elb.{{.Role.TFName}}.dns_name}"
    zone_id                = "${data.aws_elb_hosted_zone_id.main.id}"
    evaluate_target_health = true
  }
}

resource "aws_elb" "{{.Role.TFName}}" {
  name         = "${format("%.20s{{.Role.Name}}", data.template_file.stack_name.rendered)}"
  subnets      = ["${var.public_subnet_ids}"]
  idle_timeout = 600

  security_groups = [
    "${aws_security_group.{{.Role.TFName}}_elb.id}",
  ]

{{ if .Role.AWS.EnableInternalELBAccessLogs -}}
  access_logs {
    enabled       = "${var.elb_access_logs_internal_enabled}"
    bucket        = "${var.elb_access_logs_internal_bucket}"
    bucket_prefix = "${var.elb_access_logs_internal_bucket_prefix}"
    interval      = "${var.elb_access_logs_internal_bucket_interval}"
  }
{{ end -}}

{{ if eq .Role.Name "jenkins" }}
  cross_zone_load_balancing = true

{{ if .JenkinsCertificateARN }}
  listener {
    instance_port      = "${var.jenkins_elb_instance_port_http}"
    instance_protocol  = "http"
    lb_port            = 443
    lb_protocol        = "https"
    ssl_certificate_id = "${var.certificate_arn}"
  }
{{ else }}
  listener {
    instance_port      = "${var.jenkins_elb_instance_port_http}"
    instance_protocol  = "http"
    lb_port            = 80
    lb_protocol        = "http"
  }
{{ end }}

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "TCP:${var.jenkins_elb_instance_port_http}"
    interval            = 30
  }

{{ else }}
  listener {
    instance_port     = "${var.ingress_elb_nodeport_http}"
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }

  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 5
    timeout             = 3
    target              = "TCP:${var.ingress_elb_nodeport_http}"
    interval            = 10
  }
{{ end }}

  #listener {
  #  instance_port      = "${var.ingress_elb_nodeport_http}"
  #  instance_protocol  = "http"
  #  lb_port            = 443
  #  lb_protocol        = "https"
  #  ssl_certificate_id = "${data.aws_acm_certificate.wildcard.arn}"
  #}

  tags {
    Environment = "${var.environment}"
    Project     = "${var.project}"
    Contact     = "${var.contact}"
  }
}

{{ end -}}
